3.5.1.3

@functools.lru_cache(maxsize=128, typed=False) is a decorator to wrap a function with a memoizing callable that
saves up to the maxsize most recent calls.
It can save time when an expensive or I/O bound function is periodically called with the same arguments.
The cache keeps references to the arguments and return values until they age out of the cache or until the cache is cleared.

Example of efficiently computing Fibonacci numbers using a cache to implement a dynamic programming technique:
`````````````````````````````````````````````````````````````````````
@lru_cache(maxsize=None)
def fib(n):
    if n < 2:
        return n
    return fib(n-1) + fib(n-2)

>>> [fib(n) for n in range(16)]
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]

>>> fib.cache_info()
CacheInfo(hits=28, misses=16, maxsize=None, currsize=16)
`````````````````````````````````````````````````````````````````````

Reference: https://docs.python.org/3/library/functools.html

