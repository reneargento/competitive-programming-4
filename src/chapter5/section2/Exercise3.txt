5.2.3

To compute the value of S(a, n) = (1 * a + 2 * a^2 + 3 * a^3 + ... + n * a^n) modulo 10^9 + 7 where 1 < a < 10 in O(lg n), we can use the following approach.
The problem can be tackled by breaking down the sum into a form that can be solved with fast exponentation and summation formulas.

The sum can be written as:
          n
S(a, n) = ∑  k * a^k
          k=1

This is a weighted geometric sum where each term is k * a^k.
It can be computed using the following relations:
1- The geometric sum for a^k is:
         n
G(a,n) = ∑  a^k = a + a^2 + ... + a^n = a * (1 - a^n) / (1 - a) (for a != 1)
         k=1

For a = 1, the geometric sum simplifies to:
     n
Pn = ∑  1^k = n
     k=1
                              n
2- The weighted geometric sum ∑  k * a^k can be computed by differentiating the geometric sum G(a,n) and multiplying the result by a.
                              k=1
Taking the derivative of G(a,n) with respect to a:
d/d*a G(a,n) = ((1 - a^n) - n * a^n * (1 - a)) / (1 - a)^2
Multiplying by a:
          n
S(a, n) = ∑  k * a^k = (a * (1 - a^n - n * a^n * (1 - a))) / (1 - a)^2
          k=1

For a = 1, the result can be computed directly with the following formula:
          n
S(a, n) = ∑  k = n * (n + 1) / 2
          k=1

3- The final closed formula for the original problem is then:
S(a, n) = ((a * (1 − a^n − n * a^n  * (1 − a))) / (1 - a)^2) % (10^9 + 7)

Fast (modular) exponentiation can be used to compute a^n % (10^9 + 7).
Modular arithmetic can be used to compute inverses like (1 - a)^-1 and (1 - a)^2 efficiently using Fermat's Little Theorem.

Exercise3.java has the code for solving this equation in log(n) time.